buildscript {
    repositories {
        //Forge
        maven { url = 'https://maven.minecraftforge.net' }
        //Mixin
        maven {
            url = 'https://repo.spongepowered.org/repository/maven-public/'
            content { includeGroup "org.spongepowered" }
        }
        //Parchment
        maven { url = 'https://maven.parchmentmc.org' }
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
        classpath 'org.spongepowered:mixingradle:0.7-SNAPSHOT'
    }
}

plugins {
    id 'eclipse'
    id 'maven-publish'
    id 'net.minecraftforge.gradle' version '5.1.+'
    id 'org.parchmentmc.librarian.forgegradle' version '1.+'
}

apply plugin: 'org.spongepowered.mixin'

jarJar.enable()

version = "${robotics_version}"
group = 'com.ignis.norabotics'
archivesBaseName = 'norabotics'

java.toolchain.languageVersion = JavaLanguageVersion.of(17)
println "Java: ${System.getProperty 'java.version'}, JVM: ${System.getProperty 'java.vm.version'} (${System.getProperty 'java.vendor'}), Arch: ${System.getProperty 'os.arch'}"

ext {
    versionProperties = ["version"       : robotics_version, "mc_version": minecraft_version_range, "forge_version": forge_version_range, "loader_version": loader_version_range, "cct_version": cct_version_range, "geckolib_version": geckolib_version_range]
}

minecraft {
    mappings channel: 'parchment', version: "${parchment_version}-${minecraft_version}"
    runs {
        client {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'info'
            property 'forge.enabledGameTestNamespaces', 'norabotics'
            mods {
                norabotics {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'forge.enabledGameTestNamespaces', 'norabotics'
            mods {
                norabotics {
                    source sourceSets.main
                }
            }
        }

        gameTestServer {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'forge.enabledGameTestNamespaces', 'norabotics'
            mods {
                norabotics {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            args '--mod', 'norabotics', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
            mods {
                norabotics {
                    source sourceSets.main
                }
            }
        }

        configureEach {
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${buildDir}/createSrgToMcp/output.srg"
        }
    }
}

sourceSets.main.resources { srcDir 'src/generated/resources' }  // Include resources generated by data generators.

setupTasks(sourceSets.main)

def setupTasks(SourceSet sourceSet) {
    def output = sourceSet.name
    def compileTask = tasks.named(sourceSet.getCompileJavaTaskName(), JavaCompile)
    def replaceResourceTask = tasks.register(sourceSet.getTaskName("replace", "resources"), Copy, {
        setGroup("replace resources")
        outputs.upToDateWhen { false }
        def modsToml = copySpec {
            from(sourceSet.resources) {
                include "META-INF/mods.toml"
                expand versionProperties
            }
        }
        //Copy it into the build dir
        with(modsToml)
        into layout.buildDirectory.dir("resources/${output}/")
        //If IntelliJ's output dir exists, copy it there as well
        def intellijPath = sourceSet == project.sourceSets.main ? "production" : output
        if (new File("$rootDir/out/${intellijPath}/resources/").exists()) {
            copy {
                with(modsToml)
                into "$rootDir/out/${intellijPath}/resources/"
            }
        }
        //If Eclipse's output dir exists, copy it there as well
        if (new File("$rootDir/bin/${output}/").exists()) {
            copy {
                with(modsToml)
                into "$rootDir/bin/${output}/"
            }
        }
    })
    //Set the various variables/settings for the different process resources tasks
    tasks.named(sourceSet.getProcessResourcesTaskName(), ProcessResources).configure {
        setGroup("process resources")
        duplicatesStrategy(DuplicatesStrategy.FAIL)
        exclude('META-INF/mods.toml')
        from("${projectDir}") { include 'logo.png' }
        //Depend on the compile task so that we can map the computer methods as needed
        dependsOn(compileTask)
        finalizedBy(replaceResourceTask)
    }
    //Make the various classes tasks depend on the corresponding replaceResources tasks in addition to the default processResources tasks they depend on
    tasks.named(sourceSet.getClassesTaskName()).configure { dependsOn(replaceResourceTask) }
}

repositories {
    maven {  // JEI & Patchouli
        name = "Jared's maven"
        url = "https://maven.blamejared.com/"
    }
    maven {  // location of a maven mirror for JEI files, as a fallback
        name = "ModMaven"
        url = "https://modmaven.dev"
    }
    maven {
        name = "LocalHost"
        allowInsecureProtocol = true
        url = "http://localhost:8080/releases"
    }
    maven {  // Geckolib
        url = "https://dl.cloudsmith.io/public/geckolib3/geckolib/maven/"
    }
    maven {  // CurseForge
        url "https://cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }
    maven {  // CC Tweaked
        url = "https://squiddev.cc/maven/"
        content {
            includeGroup("cc.tweaked")
            includeModule("org.squiddev", "Cobalt")
        }
    }
}

dependencies {
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"

    annotationProcessor "org.spongepowered:mixin:${mixin_version}:processor"

    jarJar("au.edu.federation.caliko:caliko:1.3.8") {
        jarJar.ranged(it, "[1.3.0,1.4.0]")
    }
    minecraftLibrary "au.edu.federation.caliko:caliko:1.3.8"
  
    // JEI
    compileOnly(fg.deobf("mezz.jei:jei-${minecraft_version}-common-api:${jei_version}"))
    compileOnly(fg.deobf("mezz.jei:jei-${minecraft_version}-forge-api:${jei_version}"))
    runtimeOnly(fg.deobf("mezz.jei:jei-${minecraft_version}-forge:${jei_version}"))
    // CC Tweaked
    implementation fg.deobf("cc.tweaked:cc-tweaked-${minecraft_version}-forge:${cct_version}")
    // Geckolib
    implementation fg.deobf("software.bernie.geckolib:geckolib-forge-${minecraft_version}:${geckolib_version}")
    // Patchouli
    runtimeOnly fg.deobf("vazkii.patchouli:Patchouli:${minecraft_version}-${patchouli_version}-FORGE")

    // Mekanism at runtime
    runtimeOnly(fg.deobf("curse.maven:mekanism-268560:5125665"))
    // Item Tags at runtime
    runtimeOnly(fg.deobf("curse.maven:tagtooltips-899941:4687165"))

    testImplementation(platform('org.junit:junit-bom:5.9.3'))
    testImplementation('org.junit.jupiter:junit-jupiter')
}

mixin {
    add sourceSets.main, "norabotics.refmap.json"
    config "norabotics.mixins.json"
}

// Example for how to get properties into the manifest for reading at runtime.
jar {
    manifest {
        attributes([
                "Specification-Title"     : project.name,
                "Specification-Vendor"    : "${author_name}",
                "Specification-Version"   : "${robotics_version}",
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : project.jar.archiveVersion,
                "Implementation-Vendor"   : "${author_name}",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}
jar.finalizedBy('reobfJar')

test {
    useJUnitPlatform()
    testLogging {
        events "passed", "skipped", "failed"
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}